// <auto-generated />
using System;
using EatDomicile.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EatDomicile.Migrations
{
    [DbContext(typeof(EatDomicileContext))]
    [Migration("20250903144149_ProductAndCo")]
    partial class ProductAndCo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EatDomicile.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EatDomicile.Models.Allergen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BurgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PastaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("PastaId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Allergens");
                });

            modelBuilder.Entity("EatDomicile.Models.Burger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("KCal")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Burgers");
                });

            modelBuilder.Entity("EatDomicile.Models.Dough", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doughs");
                });

            modelBuilder.Entity("EatDomicile.Models.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Fizzy")
                        .HasColumnType("bit");

                    b.Property<double>("KCal")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("EatDomicile.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BurgerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("KCal")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PastaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PizzaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BurgerId");

                    b.HasIndex("PastaId");

                    b.HasIndex("PizzaId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("EatDomicile.Models.Pasta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("KCal")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Pastas");
                });

            modelBuilder.Entity("EatDomicile.Models.Pizza", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoughId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("KCal")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoughId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("EatDomicile.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EatDomicile.Models.Allergen", b =>
                {
                    b.HasOne("EatDomicile.Models.Burger", null)
                        .WithMany("Allergens")
                        .HasForeignKey("BurgerId");

                    b.HasOne("EatDomicile.Models.Drink", null)
                        .WithMany("Allergens")
                        .HasForeignKey("DrinkId");

                    b.HasOne("EatDomicile.Models.Pasta", null)
                        .WithMany("Allergens")
                        .HasForeignKey("PastaId");

                    b.HasOne("EatDomicile.Models.Pizza", null)
                        .WithMany("Allergens")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("EatDomicile.Models.Ingredient", b =>
                {
                    b.HasOne("EatDomicile.Models.Burger", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("BurgerId");

                    b.HasOne("EatDomicile.Models.Pasta", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("PastaId");

                    b.HasOne("EatDomicile.Models.Pizza", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("PizzaId");
                });

            modelBuilder.Entity("EatDomicile.Models.Pizza", b =>
                {
                    b.HasOne("EatDomicile.Models.Dough", "Dough")
                        .WithMany()
                        .HasForeignKey("DoughId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dough");
                });

            modelBuilder.Entity("EatDomicile.Models.User", b =>
                {
                    b.HasOne("EatDomicile.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EatDomicile.Models.Burger", b =>
                {
                    b.Navigation("Allergens");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EatDomicile.Models.Drink", b =>
                {
                    b.Navigation("Allergens");
                });

            modelBuilder.Entity("EatDomicile.Models.Pasta", b =>
                {
                    b.Navigation("Allergens");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("EatDomicile.Models.Pizza", b =>
                {
                    b.Navigation("Allergens");

                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
